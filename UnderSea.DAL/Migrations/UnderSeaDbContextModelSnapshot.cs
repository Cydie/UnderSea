// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UnderSea.DAL.Context;

namespace UnderSea.DAL.Migrations
{
    [DbContext(typeof(UnderSeaDbContext))]
    partial class UnderSeaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Attack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttackerUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DefenderUserId")
                        .HasColumnType("int");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttackerUserId");

                    b.HasIndex("DefenderUserId");

                    b.HasIndex("GameId");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Buildings.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BuildingGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ConstructionTimeLeft")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UnderConstructionCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingGroupId");

                    b.HasIndex("TypeId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Buildings.BuildingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("BuildingGroup");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Buildings.BuildingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoralBonus")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PopulationBonus")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UnitStorage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BuildingType");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BuildingType");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BuildingGroupId")
                        .HasColumnType("int");

                    b.Property<int>("BuildingTimeLeft")
                        .HasColumnType("int");

                    b.Property<int>("Coral")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pearl")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeTimeLeft")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingGroupId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoralPictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PearlPictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Game");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CoralPictureUrl = "",
                            PearlPictureUrl = "",
                            Round = 0
                        });
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Units.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttackId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId1")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttackId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountryId1");

                    b.HasIndex("TypeId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Units.UnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AttackScore")
                        .HasColumnType("float");

                    b.Property<int>("CoralCostPerTurn")
                        .HasColumnType("int");

                    b.Property<double>("DefenseScore")
                        .HasColumnType("float");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PearlCostPerTurn")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UnitTypes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UnitType");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Upgrades.Upgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("TypeId");

                    b.ToTable("Upgrade");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Upgrades.UpgradeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttackBonusPercentage")
                        .HasColumnType("int");

                    b.Property<int>("CoralProductionBonusPercentage")
                        .HasColumnType("int");

                    b.Property<int>("DefenseBonusPercentage")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PearlProductionBonusPercentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UpgradeType");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UpgradeType");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("UnderSea.DAL.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Buildings.FlowManager", b =>
                {
                    b.HasBaseType("UnderSea.DAL.Models.Buildings.BuildingType");

                    b.HasDiscriminator().HasValue("FlowManager");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Buildings.ReefCastle", b =>
                {
                    b.HasBaseType("UnderSea.DAL.Models.Buildings.BuildingType");

                    b.HasDiscriminator().HasValue("ReefCastle");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Units.CombatSeaHorse", b =>
                {
                    b.HasBaseType("UnderSea.DAL.Models.Units.UnitType");

                    b.HasDiscriminator().HasValue("CombatSeaHorse");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Units.LaserShark", b =>
                {
                    b.HasBaseType("UnderSea.DAL.Models.Units.UnitType");

                    b.HasDiscriminator().HasValue("LaserShark");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Units.StormSeal", b =>
                {
                    b.HasBaseType("UnderSea.DAL.Models.Units.UnitType");

                    b.HasDiscriminator().HasValue("StormSeal");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Upgrades.Alchemy", b =>
                {
                    b.HasBaseType("UnderSea.DAL.Models.Upgrades.UpgradeType");

                    b.HasDiscriminator().HasValue("Alchemy");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Upgrades.CoralWall", b =>
                {
                    b.HasBaseType("UnderSea.DAL.Models.Upgrades.UpgradeType");

                    b.HasDiscriminator().HasValue("CoralWall");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Upgrades.MudHarvester", b =>
                {
                    b.HasBaseType("UnderSea.DAL.Models.Upgrades.UpgradeType");

                    b.HasDiscriminator().HasValue("MudHarvester");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Upgrades.MudTractor", b =>
                {
                    b.HasBaseType("UnderSea.DAL.Models.Upgrades.UpgradeType");

                    b.HasDiscriminator().HasValue("MudTractor");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Upgrades.SonarCannon", b =>
                {
                    b.HasBaseType("UnderSea.DAL.Models.Upgrades.UpgradeType");

                    b.HasDiscriminator().HasValue("SonarCannon");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Upgrades.UnderwaterMartialArts", b =>
                {
                    b.HasBaseType("UnderSea.DAL.Models.Upgrades.UpgradeType");

                    b.HasDiscriminator().HasValue("UnderwaterMartialArts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("UnderSea.DAL.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("UnderSea.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("UnderSea.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("UnderSea.DAL.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderSea.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("UnderSea.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Attack", b =>
                {
                    b.HasOne("UnderSea.DAL.Models.User", "AttackerUser")
                        .WithMany()
                        .HasForeignKey("AttackerUserId");

                    b.HasOne("UnderSea.DAL.Models.User", "DefenderUser")
                        .WithMany()
                        .HasForeignKey("DefenderUserId");

                    b.HasOne("UnderSea.DAL.Models.Game", null)
                        .WithMany("Attacks")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Buildings.Building", b =>
                {
                    b.HasOne("UnderSea.DAL.Models.Buildings.BuildingGroup", null)
                        .WithMany("Buildings")
                        .HasForeignKey("BuildingGroupId");

                    b.HasOne("UnderSea.DAL.Models.Buildings.BuildingType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Country", b =>
                {
                    b.HasOne("UnderSea.DAL.Models.Buildings.BuildingGroup", "BuildingGroup")
                        .WithMany()
                        .HasForeignKey("BuildingGroupId");

                    b.HasOne("UnderSea.DAL.Models.User", "User")
                        .WithOne("Country")
                        .HasForeignKey("UnderSea.DAL.Models.Country", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Units.Unit", b =>
                {
                    b.HasOne("UnderSea.DAL.Models.Attack", null)
                        .WithMany("UnitList")
                        .HasForeignKey("AttackId");

                    b.HasOne("UnderSea.DAL.Models.Country", null)
                        .WithMany("AttackingArmy")
                        .HasForeignKey("CountryId");

                    b.HasOne("UnderSea.DAL.Models.Country", null)
                        .WithMany("DefendingArmy")
                        .HasForeignKey("CountryId1");

                    b.HasOne("UnderSea.DAL.Models.Units.UnitType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.Upgrades.Upgrade", b =>
                {
                    b.HasOne("UnderSea.DAL.Models.Country", null)
                        .WithMany("Upgrades")
                        .HasForeignKey("CountryId");

                    b.HasOne("UnderSea.DAL.Models.Upgrades.UpgradeType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("UnderSea.DAL.Models.User", b =>
                {
                    b.HasOne("UnderSea.DAL.Models.Game", null)
                        .WithMany("Users")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
